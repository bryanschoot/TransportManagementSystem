@model MailViewModel

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
}

<form asp-controller="Home" asp-action="Mail" id="MailFrom" data-ajax="true" data-ajax-method="POST" class="mx-5">
    <div class="form-group my-4">
        <label asp-for="Email" for="email">Email address</label>
        <input asp-for="Email" type="email" class="form-control" id="email" placeholder="name@example.com">
        <span asp-validation-for="Email" class="text-white"></span>
    </div>
    <div class="form-group my-4">
        <label asp-for="Comment" for="comment">Comment</label>
        <textarea asp-for="Comment" class="form-control" id="comment" rows="3" placeholder="Comment here..."></textarea>
        <span asp-validation-for="Comment" class="text-white"></span>
    </div>
    <button type="button" class="btn btn-outline-dark btn-block btn-lg" onclick="myMailFunction()">Request!</button>
</form>

<script>
    function myMailFunction() {
        var $frm = $('#MailFrom');
        //Serializing all For Input Values (not files!) in an Array Collection so that we can iterate this collection later.
        var params = $frm.serializeArray();

        //Declaring new Form Data Instance
        var formData = new FormData();

        //Now Looping the parameters for all form input fields and assigning them as Name Value pairs.
        $(params).each(function(index, element) {
            formData.append(element.name, element.value);
        });

        console.log(formData);
        $.ajax({
            type: "POST",
            url: '@Url.Action("Mail", "Home")',
            contentType: false,
            processData: false,
            data: formData,
            success: function (result) {
                $('#MailFrom').data(result);
            },
            error: function () {
            }
        });
    }
</script>